@model FilterTracker.Models.PatientFilterEditorModel
@using FilterTracker.Models;

@{
	ViewBag.Title = "Edit Patient Filter";
}

<div class="toast bg-primary border-info" role="alert" aria-live="assertive" aria-atomic="true" style="position: absolute; top: 100px; right: 200px;">
	<div class="toast-header bg-primary">
		<i class="fa fa-newspaper-o" style="color: white"></i>
		<span class="ml-2 mr-auto" style="color: white" id="alert-title"></span>
		<button type="button" class="ml-2 mb-1 close text-lighter" data-dismiss="toast" aria-label="Close">
			<span aria-hidden="true">&times;</span>
		</button>
	</div>
	<div class="toast-body bg-primary" style="color: white;" id="alert-body"></div>
</div>

<br />
<div class="container">
	<br />
	<br/>
	<div class="row">
		<div class="col-4">
			<h2>@ViewBag.Title</h2>

		</div>
		<div class="col-6">
			<select id="ForceToTask" name="ForceToTask" class="form-control pull-left" style="max-width: 150px; display: inline !important;">
				<option value="@((int)TaskTypes.BuildCase)">Build Case</option>
				<option value="@((int)TaskTypes.ContactPCP)">Contact PCP</option>
				<option value="@((int)TaskTypes.ReviewCase)">Review Case</option>
				<option value="@((int)TaskTypes.SendRegisteredLetters)">Send Registered Letter</option>
			</select>&nbsp;
			<input type="button" onclick="ForceToTask(false);" value="Reopen Task" class="btn btn-sm btn-primary pull-left ml-2 mt-1" />
		</div>

	</div>

	<hr />

	<div class="row">
		<div class="col-xs-3 col-md-3 col-lg-3 margin-bottom-20">
			@Html.ActionLink("Back to Patient", "PatientDetails", new { Id = Model.PatientId }, new { @class = "pull-left" })
		</div>
	</div>

	<div class="row">
		<div class="col-12 card graph-container-parent border-info" style="height: 300px; background-color: rgb(25, 25, 25) !important;">
			<div class="card-body graph-container">
				<canvas id="graph" class="graph" style="width:100% !important; height:100% !important;"></canvas>
			</div>
		</div>
	</div>
	@using (Html.BeginForm())
	{
		@Html.AntiForgeryToken()

		<input type="hidden" id="PatientFilterId" name="PatientFilterId" value="@Model.PatientFilterId" />
		@Html.HiddenFor(m => m.PatientId)
		@Html.HiddenFor(m => m.OrganizationId)

		<div class="card text-white bg-dark">
			<div class="card-body">
				<div class="container">
					<div class="row row-cols-4">
						<div class="col">
							<div class="form-group">
								<span class="text-white-50 text-right">Name</span>
								<span class="text-white text-left">@Model.Patient.FullName</span>
							</div>
						</div>
						<div class="col">
							<div class="form-group">
								<span class="text-white-50 text-right">MRN</span>
								<span class="text-white text-left">@Model.Patient.MRN</span>
							</div>
						</div>
						<div class="col">
							<div class="form-group">
								<span class="text-white-50 text-right">Birthdate</span>
								<span class="text-white text-left">@Model.Patient.DateOfBirth.ToShortDateString()</span>
							</div>
						</div>
						<div class="col">
							<div class="form-group">
								<span class="text-white-50 text-right">Gender</span>
								@if (Model.Patient.Gender.HasValue)
								{
									if (Model.Patient.Gender.Value == 1)
									{
										<span class="text-white text-left">Male</span>
									}
									else
									{
										<span class="text-white text-left">Female</span>
									}
								}
							</div>
						</div>
					</div>
					<div class="row row-cols-2">
						<div class="col">
							<div class="form-group">
								<span class="text-white-50 text-right">Primary Phone Number</span>
								<span class="text-white text-left">@Model.Patient.PrimaryPhoneNumber</span>
							</div>
						</div>
						<div class="col">
							<div class="form-group">
								<span class="text-white-50 text-right">Primary Email</span>
								<span class="text-white text-left">@Model.Patient.PrimaryEmailAddress</span>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>

		<div class="row" style="padding-top: 30px;">
			<div class="form-group col-sm-4 col-md-4 col-lg-4">
				@Html.LabelFor(m => m.ProcedureDate, new { style = "margin-right: 10px;" })
				@Html.TextBoxFor(m => m.ProcedureDate, new { @class = "form-control margin-bottom-5" })
				<span>@Html.ValidationMessageFor(m => m.ProcedureDate, "", new { @class = "text-danger" })</span>
			</div>
			<div class="form-group col-sm-4 col-md-4 col-lg-4">
				<label for="TargetRemovalDate">Target Removal Date</label>
				@Html.TextBoxFor(m => m.TargetRemovalDate, new { @class = "form-control margin-bottom-5" })
				<span>@Html.ValidationMessageFor(m => m.TargetRemovalDate, "", new { @class = "text-danger" })</span>
			</div>
			<div class="form-group col-sm-4 col-md-4 col-lg-4">
				<label for="ActualRemovalDate">Actual Removal Date</label>
				@Html.TextBoxFor(m => m.ActualRemovalDate, new { @class = "form-control margin-bottom-5" })
				<span>@Html.ValidationMessageFor(m => m.ActualRemovalDate, "", new { @class = "text-danger" })</span>
			</div>
		</div>
		<div class="row" style="padding-top: 30px;">
			<div class="form-group col-sm-4 col-md-4 col-lg-4">
				@Html.LabelFor(m => m.IsTemporary)
				@Html.CheckBoxFor(m => m.IsTemporary, new { @style = "width: 15px; height: 15px; margin-left: 10px;" })
			</div>
			<div class="form-group col-sm-4 col-md-4 col-lg-4">
				@Html.LabelFor(m => m.MadePermanent)
				@if (Model.AmEditing)
				{
					@Html.TextBoxFor(m => m.MadePermanent, new { @class = "form-control margin-bottom-5" })
				}
				else
				{
					@Html.TextBoxFor(m => m.MadePermanent, new { @class = "form-control margin-bottom-5", @readonly = "readonly" })
				}
			</div>
			<div class="form-group col-sm-4 col-md-4 col-lg-4">
				@Html.LabelFor(m => m.MadePermanentBy)
				@if (Model.AmEditing)
				{
					@Html.TextBoxFor(m => m.MadePermanentBy, new { @class = "form-control margin-bottom-5" })
				}
				else
				{
					@Html.TextBoxFor(m => m.MadePermanentBy, new { @class = "form-control margin-bottom-5", @readonly = "readonly" })
				}
			</div>
		</div>
		<div class="row" style="padding-top: 30px;">
			<div class="form-group col-sm-4 col-md-4 col-lg-4">
				<div>
					@Html.LabelFor(m => m.SelectedPrimaryCarePhysicianId, new { style = "margin-right: 10px;" })
					<a href="#" style="font-size: 0.9em" id="AddPCP" onclick="$('#new-pcp-dialog').modal('show');">Add</a>
				</div>
				@Html.DropDownListFor(m => m.SelectedPrimaryCarePhysicianId, Model.Physicians, new { @class = "form-control margin-bottom-5" })
				<span>@Html.ValidationMessageFor(m => m.SelectedPrimaryCarePhysicianId, "", new { @class = "text-danger" })</span>
			</div>
			<div class="form-group col-sm-4 col-md-4 col-lg-4">
				@Html.LabelFor(m => m.SelectedProcedurePhysicianId, new { style = "margin-right: 10px;" })
				@Html.DropDownListFor(m => m.SelectedProcedurePhysicianId, Model.ClinicPhysicians, new { @class = "form-control margin-bottom-5" })
				<span>@Html.ValidationMessageFor(m => m.SelectedProcedurePhysicianId, "", new { @class = "text-danger" })</span>
			</div>
			<div class="form-group col-sm-4 col-md-4 col-lg-4">
				<label for="SelectedOrderingPhysicianId" style="margin-right: 10px;">Ordering Physician</label>
				@Html.DropDownListFor(m => m.SelectedOrderingPhysicianId, Model.Physicians, new { @class = "form-control margin-bottom-5" })
				<span>@Html.ValidationMessageFor(m => m.SelectedOrderingPhysicianId, "", new { @class = "text-danger" })</span>
			</div>
		</div>
		<div class="row" style="padding-top: 30px;">
			<div class="form-group col-sm-4 col-md-4 col-lg-4">
				<label for="SelectedIndicationId" style="margin-right: 10px;">Indications</label>
				@Html.DropDownListFor(m => m.SelectedIndicationId, Model.Indications, new { @class = "form-control margin-bottom-5" })
				<span>@Html.ValidationMessageFor(m => m.SelectedIndicationId, "", new { @class = "text-danger" })</span>
			</div>
			<div class="form-group col-sm-4 col-md-4 col-lg-4">
				<div>
					@Html.LabelFor(m => m.SelectedComplicatingFactorId)
					<a href="#" style="font-size: 0.9em; margin-left: 10px;" id="Add" onclick="$('#new-compfact-dialog').modal('show');">Add</a>
				</div>
				@Html.DropDownListFor(m => m.SelectedComplicatingFactorId, Model.ComplicatingFactors, new { @class = "form-control margin-bottom-5" })
				<span>@Html.ValidationMessageFor(m => m.SelectedComplicatingFactorId, "", new { @class = "text-danger" })</span>
			</div>
			<div class="form-group col-sm-4 col-md-4 col-lg-4">
				<div>
					<label for="SelectedFilterId" style="margin-right: 10px;">Filter</label>
					<a href="#" style="font-size: 0.9em" id="AddFilter" onclick="$('#new-filter-dialog').modal('show');">Add</a>
				</div>
				@Html.DropDownListFor(m => m.SelectedFilterId, Model.Filters, new { @class = "form-control margin-bottom-5" })
				<span>@Html.ValidationMessageFor(m => m.SelectedFilterId, "", new { @class = "text-danger" })</span>
			</div>
		</div>
		<div class="row" style="padding-top: 30px;">
			<div class="form-group col-sm-12 col-md-12 col-lg-12">
				<label for="Notes" style="margin-right: 10px;">Notes</label>
				@Html.TextAreaFor(m => m.Notes, new { @class = "form-control margin-bottom-5", style = "width: 100%" })
				<span>@Html.ValidationMessageFor(m => m.Notes, "", new { @class = "text-danger" })</span>
			</div>
		</div>
		<div class="row">
			<div class="col-sm-2 col-md-2 col-lg-1 pull-left">
				<input type="submit" class="btn btn-primary" value="Save" />
			</div>
		</div>


		<div id="new-filter-dialog" class="modal fade" tabindex="-1" role="dialog">
			<div class="modal-dialog">
				<div class="modal-content">
					<div class="modal-header">
						<h4>New Filter</h4>
						<button type="button" class="close" data-dismiss="modal" aria-label="Close">
							<span aria-hidden="true">&times;</span>
						</button>
					</div>
					<div class="modal-body">
						<div class="container">
							<div class="row">
								<div class="col-3 pull-right">Name</div>
								<div class="col-6"><input type="text" id="filter-name" value="" class="pull-left form-control width-full" /></div>
							</div>
							<div class="row pt-2">
								<div class="col-3 pull-right">Manufacturer</div>
								<div class="col-6"><input type="text" id="filter-manufacturer" value="" class="pull-left form-control width-full" /></div>
							</div>
							<div class="row pt-2">
								<div class="col-3 pull-right">Permanent</div>
								<div class="col-6"><input type="checkbox" id="filter-permanent" name="IsPermanent" class="pull-left" style="width: 16px; height: 16px; padding-top: 8px;" /></div>
							</div>
						</div>
					</div>
					<div class="modal-footer">
						<button id="add-filter" type="button" class="btn btn-primary btn-sm pull-right" data-dismiss="modal" onclick="SaveFilter();">Save</button>
					</div>
				</div>
			</div>
		</div>

		<div id="new-compfact-dialog" class="modal fade" tabindex="-1" role="dialog">
			<div class="modal-dialog">
				<div class="modal-content">
					<div class="modal-header">
						<h4>New Complicating Factor</h4>
						<button type="button" class="close" data-dismiss="modal" aria-label="Close">
							<span aria-hidden="true">&times;</span>
						</button>
					</div>
					<div class="modal-body">
						<div class="container">
							<div class="row">
								<div class="col-3 pull-right">Name</div>
								<div class="col-6"><input type="text" id="cf-name" value="" class="pull-left form-control width-full" /></div>
							</div>
							<div class="row pt-2">
								<div class="col-3 pull-right">Description</div>
								<div class="col-6"><input type="text" id="cf-desc" value="" class="pull-left form-control width-full" /></div>
							</div>
						</div>
					</div>
					<div class="modal-footer">
						<button id="add-cf" type="button" class="btn btn-primary btn-sm pull-right" data-dismiss="modal" onclick="SaveComplicatingFactor();">Save</button>
					</div>
				</div>
			</div>
		</div>

		<div id="new-pcp-dialog" class="modal fade" tabindex="-1" role="dialog">
			<div class="modal-dialog">
				<div class="modal-content">
					<div class="modal-header">
						<h4>New Primary Care Provider</h4>
						<button type="button" class="close" data-dismiss="modal" aria-label="Close">
							<span aria-hidden="true">&times;</span>
						</button>
					</div>
					<div class="modal-body">
						<div class="container">
							<div class="row">
								<div class="col-3 pull-right">Name</div>
								<div class="col-6"><input type="text" id="pcp-name" value="" class="pull-left form-control width-full" /></div>
							</div>
							<div class="row pt-2">
								<div class="col-3 pull-right">Email</div>
								<div class="col-6"><input type="text" id="pcp-email" value="" class="pull-left form-control width-full" /></div>
							</div>
							<div class="row pt-2">
								<div class="col-3 pull-right">Phone</div>
								<div class="col-6"><input type="text" id="pcp-phone" value="" class="pull-left form-control width-full" /></div>
							</div>
							<div class="row mt-2">
								<div class="col-7 pull-right">Requires Approval Prior to Removal</div>
								<div class="col-1"><input type="checkbox" id="pcp-requires-approval" class="pull-left mt-1" /></div>
							</div>
						</div>
					</div>
					<div class="modal-footer">
						<button id="add-pcp" type="button" class="btn btn-primary btn-sm pull-right" data-dismiss="modal" onclick="SavePCP();">Save</button>
					</div>
				</div>
			</div>
		</div>
	}


</div>

@section scripts{
	<script type="text/javascript" src="~/Scripts/Chart.js"></script>
	<script type="text/javascript" src="~/Scripts/chartjs-plugin-annotation.min.js"></script>
	<script type="text/javascript">

		$(document).ready(function () {
			$('.toast').toast({ delay: 5000, autohide: true, animation: true });

			ConfigureFilterHistoryGraph();
		});

		function SaveFilter() {
			var n = $("#filter-name").val();
			var m = $("#filter-manufacturer").val();
			var p = $("#filter-permanent").val();

			if (p != null && p.length > 0) {
				if (p == 'on' || p == 'On' || p == 'ON')
					p = "true";
			}

			var msg = '';

			if (n == null || n.length == 0) {
				msg = "A name is required.";
			}

			if (m == null || m.length == 0) {
				if (msg.length == 0)
					msg = "A manufacturer is required.";
				else
					msg += "\r\n" + "A manufacturer is required.";
			}

			if (msg.length > 0) {
				alert(msg);
				return;
			}

			try {
				var form = $('#__AjaxAntiForgeryForm');
				var token = $('input[name="__RequestVerificationToken"]', form).val();

				$.ajax({
					url: "/Home/AddFilter",
					cache: false,
					method: "POST",
					dataType: "json",
					async: false,
					data: {
						__RequestVerificationToken: token,
						Name: n,
						Manufacturer: m,
						IsPermanent: p
					},
					success: function (opts) {
						if (opts != null) {
							var opt = "";
							var target = $("#SelectedFilterId");
							target.empty();
							for (var i = 0; i < opts.length; i++) {
								if (opts[i].Selected == "true") {
									opt = "<option value='" + opts[i].Value + "' selected>" + opts[i].Text + "</option>";
								} else {
									opt = "<option value='" + opts[i].Value + "' selected>" + opts[i].Text + "</option>";
								}
								target.append(opt);
							}
						} else {
							$('.modal').modal('hide');
						}
					},
					error: function (xhr, error, status) {
						if (xhr.responseText != null && xhr.responseText.length > 0)
							alert(xhr.responseText);
						else
							alert(error + "::" + status);
					}
				});
			}
			catch (e) {
				alert(e);
			}
		}

		function SavePCP() {
			var n = $("#pcp-name").val();
			var e = $("#pcp-email").val();
			var p = $("#pcp-phone").val();
			var ra = $("#pcp-requires-approval").prop("checked");

			if (n == null || n.length == 0) {
				alert("A name is required.");
				return;
			}


			try {
				var form = $('#__AjaxAntiForgeryForm');
				var token = $('input[name="__RequestVerificationToken"]', form).val();

				$.ajax({
					url: "/Home/AddPCP",
					cache: false,
					method: "POST",
					dataType: "json",
					async: false,
					data: {
						__RequestVerificationToken: token,
						Name: n,
						Email: e,
						Phone: p,
						RequiresApproval: ra
					},
					success: function (opts) {
						if (opts != null) {
							var opt = "";
							var target = $("#SelectedPrimaryCarePhysicianId");
							target.empty();
							for (var i = 0; i < opts.length; i++) {
								if (opts[i].Selected == "true") {
									opt = "<option value='" + opts[i].Value + "' selected>" + opts[i].Text + "</option>";
								} else {
									opt = "<option value='" + opts[i].Value + "' selected>" + opts[i].Text + "</option>";
								}
								target.append(opt);
							}
						} else {
							$('.modal').modal('hide');
							alert("Failed to add Primary Care Provider.");
						}
					},
					error: function (xhr, error, status) {
						if (xhr.responseText != null && xhr.responseText.length > 0)
							alert(xhr.responseText);
						else
							alert(error + "::" + status);
					}
				});
			}
			catch (e) {
				alert(e);
			}
		}

		function SaveComplicatingFactor() {
			var n = $("#cf-name").val();
			var d = $("#cf-desc").val();

			if (n == null || n.length == 0) {
				alert("A name is required.");
				return;
			}

			try {
				var form = $('#__AjaxAntiForgeryForm');
				var token = $('input[name="__RequestVerificationToken"]', form).val();

				$.ajax({
					url: "/Home/AddComplicatingFactor",
					cache: false,
					method: "POST",
					dataType: "json",
					async: false,
					data: {
						__RequestVerificationToken: token,
						Name: n,
						Description: d
					},
					success: function (opts) {
						if (opts != null) {
							var opt = "";
							var target = $("#SelectedComplicatingFactorId");
							target.empty();
							for (var i = 0; i < opts.length; i++) {
								if (opts[i].Selected == "true") {
									opt = "<option value='" + opts[i].Value + "' selected>" + opts[i].Text + "</option>";
								} else {
									opt = "<option value='" + opts[i].Value + "' selected>" + opts[i].Text + "</option>";
								}
								target.append(opt);
							}
						} else {
							$('.modal').modal('hide');
						}
					},
					error: function (xhr, error, status) {
						if (xhr.responseText != null && xhr.responseText.length > 0)
							alert(xhr.responseText);
						else
							alert(error + "::" + status);
					}
				});
			}
			catch (e) {
				alert(e);
			}
		}


		function ForceToTask(force) {
			if (confirm("This will close any open tasks associated with this filter, and reopen the newest task of the type you have selected.  Are you sure you wish to continue?")) {
				try {
					var form = $('#__AjaxAntiForgeryForm');
					var token = $('input[name="__RequestVerificationToken"]', form).val();
					var pfid = $("#PatientFilterId").val();
					var ttid = $("#ForceToTask").val();


					$.ajax({
						url: "/Home/ForceToTask",
						cache: false,
						method: "POST",
						dataType: "json",
						async: false,
						data: {
							__RequestVerificationToken: token,
							patientFilterid: pfid,
							taskTypeId: ttid,
							resetPermanency: force
						},
						success: function (result) {
							if (result.Success) {
								DisplayAlert("Success", "Task successfully opened.");
							}
							else {
								if (result.Message != null && result.Message.length > 0) {
									//DisplayAlert('Failure', result.Message);
									if (confirm(result.Message)) {
										ForceToTask(true);
									}
								}
							}
						},
						error: function (xhr, error, status) {
							if (xhr.responseText != null && xhr.responseText.length > 0)
								DisplayAlert('Error', xhr.responseText);
							else
								DisplayAlert(error, status);
						}
					});
				}
				catch (e) {
					DisplayAlert(e);
				}
			}
		}


		function DisplayAlert(heading, msg) {
			try {
				var tgt = $("#alert-body");
				tgt.html(msg);
				tgt = $("#alert-title");
				tgt.html(heading);
				$('.toast').toast('show');
			}
			catch (e) {
				alert(e);
			}
		}

		function ConfigureFilterHistoryGraph() {
			try {
				var form = $('#__AjaxAntiForgeryForm');
				var token = $('input[name="__RequestVerificationToken"]').val();
				var pfid = $("#PatientFilterId").val();
				var resultdata = [];
				var resultdates = [];

				if (token != null && token.length > 0) {
					$.ajax({
						url: "/Home/PatientFilterHistoryGraph",
						cache: false,
						method: "POST",
						dataType: "json",
						async: true,
						data: {
							__RequestVerificationToken: token,
							patientFilterId: pfid
						},
						success: function (data) {
							if (!data.Success) {
								if (data.Errors != null) {
									alert(data.Errors);
								}
							} else {
								resultdata = data.Tasks;
								resultdates = data.Dates;
								try {
									var ctx = document.getElementById('graph').getContext('2d');
									var chart = new Chart(ctx, {
										// The type of chart we want to create
										type: 'line',

										// The data for our dataset
										data: {
											yLabels: ['Removed',
												'Made Permanent',
												'Retrieval Date Passed',
												'Schedule Retrieval',
												'Review Case',
												'Send Registered Letters',
												'Contact PCP',
												'Build Case'],
											xLabels: resultdates,
											datasets: [{
												label: 'Status',
												fill: false,
												backgroundColor: 'rgb(0, 64, 255)',
												borderColor: 'rgb(0, 255, 255)',
												data: resultdata,
												lineTension: 0,
												pointRadius: 5,
												showLine: false
											}]
										},

										// Configuration options go here
										options: {
											responsive: true,
											maintainAspectRatio: false,
											legend: {
												display: false
											},
											title: {
												display: true,
												text: 'Filter History'
											},
											scales: {
												xAxes: [{
													display: true,
													scaleLabel: {
														display: true,
														labelString: 'Task Creation Date'
													}
												}],
												yAxes: [{
													type: 'category',
													position: 'left',
													display: true,
													scaleLabel: {
														display: true,
														labelString: 'Task'
													},
													ticks: {
														reverse: true
													}
												}]
											}
										}
									});
								}
								catch (e) {
									alert(e);
								}
							}
						},
						error: function (xhr, error, status) {
							if (xhr.responseText != null && xhr.responseText.length > 0)
								alert(xhr.responseText);
							else
								alert(error + "::" + status);
						}
					});
				}

			}
			catch (e) {
				alert(e);
			}
		}
	</script>
}

@section css{
	<style>
		.label {
			color: black !important
		}

		.pad-top-10 {
			padding-top: 10px;
		}

		.pad-top-20 {
			padding-top: 20px;
		}

		.pad-left-10 {
			padding-left: 10px;
		}

		.pad-right-10 {
			padding-right: 10px;
		}

		.pad-all-10 {
			padding: 10px 10px 10px 10px;
		}

		.content-panel {
			min-height: 300px;
			max-height: 600px;
			margin-top: 5px;
		}
	</style>
}
